plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java-library'
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

tasks.named('test') {
	useJUnitPlatform()
}

// 각 모듈에 적용할 공통 설정
subprojects {
	group = 'com.example'
	version = '0.0.1-SNAPSHOT'

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java-library'

	java {
		sourceCompatibility = '17'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		// web
		implementation 'org.springframework.boot:spring-boot-starter-web'
	}

	// gradle 빌드시에는 각 프로젝트를 실행가능한 jar형태로 만들게 되는데, module-common 프로젝트의 경우 main메소드가 없음
	// 단순히 참조용 클래스들만 있는 프로젝트를 위해 아래와 같은 설정(bootJar, jar)들을 추가함
	bootJar {
		enabled = false
	}
	jar {
		enabled = true
	}

	test {
		useJUnitPlatform()
	}
}

// 하위 프로젝트간의 의존성을 관리
project(':sample-api') {
	dependencies {
		implementation project(':sample-application')
	}
}

project(':sample-application') {
	dependencies {
		implementation project(':sample-domain')
		implementation project(':sample-infra')
	}
}

project(':sample-infra') {
	dependencies {
		implementation project(':sample-domain')
	}
}

wrapper {
	gradleVersion = '8.3'
	distributionUrl = distributionUrl.replace("bin", "all")
}
